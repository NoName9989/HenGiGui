-- library.lua
-- MyUI Library (lightweight Rayfield-like)
-- Author: [TÊN_BẠN]
-- License: MIT

local UILib = {}
UILib._version = "0.1.0"

-- Default theme (thay đổi dễ)
UILib.Theme = {
    Background = Color3.fromRGB(30,30,30),
    Header = Color3.fromRGB(18,18,18),
    Panel = Color3.fromRGB(36,36,36),
    Panel2 = Color3.fromRGB(46,46,46),
    Accent = Color3.fromRGB(100,200,120),
    Text = Color3.fromRGB(230,230,230),
    Font = Enum.Font.Gotham,
    Corner = UDim.new(0,6)
}

-- State lưu tạm (global cho UI này)
UILib.State = {
    Visible = true,
    DefaultWindow = nil
}

-- helper tạo instance nhanh
local function new(className, props, children)
    local inst = Instance.new(className)
    if props then
        for k,v in pairs(props) do
            -- set property safe
            pcall(function() inst[k] = v end)
        end
    end
    if children then
        for _,c in ipairs(children) do
            c.Parent = inst
        end
    end
    return inst
end

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")

-- Change theme at runtime
function UILib:SetTheme(t)
    for k,v in pairs(t) do
        if self.Theme[k] ~= nil then
            self.Theme[k] = v
        end
    end
    -- apply to existing window if present
    local w = self.State.DefaultWindow
    if w then
        w.Frame.BackgroundColor3 = self.Theme.Background
        w.Header.BackgroundColor3 = self.Theme.Header
        w.Content.BackgroundColor3 = self.Theme.Panel
        -- We don't iterate all children for perf — you can re-create or expand later.
    end
end

-- Create window (returns window object)
function UILib:CreateWindow(title, size) -- size = Vector2
    local player = Players.LocalPlayer
    assert(player, "CreateWindow must be called from LocalScript")

    local gui = new("ScreenGui", {Name = "MyUILib_UI", ResetOnSpawn = false})
    gui.Parent = player:WaitForChild("PlayerGui")

    local frame = new("Frame", {
        Size = UDim2.fromOffset(size.X, size.Y),
        Position = UDim2.new(0.5, -size.X/2, 0.5, -size.Y/2),
        BackgroundColor3 = self.Theme.Background,
        BorderSizePixel = 0,
        Parent = gui
    })

    local frameCorner = new("UICorner", {CornerRadius = self.Theme.Corner}, { })
    frameCorner.Parent = frame

    local header = new("Frame", {
        Size = UDim2.new(1,0,0,28),
        BackgroundColor3 = self.Theme.Header,
        BorderSizePixel = 0,
        Parent = frame
    })

    local headerCorner = new("UICorner", {CornerRadius = self.Theme.Corner})
    headerCorner.Parent = header

    local titleLabel = new("TextLabel", {
        Size = UDim2.new(1, -90, 1, 0),
        Position = UDim2.fromOffset(8,0),
        BackgroundTransparency = 1,
        Text = title or "Window",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })

    local btnClose = new("TextButton", {
        Size = UDim2.fromOffset(28, 20),
        Position = UDim2.new(1, -34, 0.5, -10),
        BackgroundTransparency = 1,
        Text = "✕",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 16,
        Parent = header
    })

    local btnMin = new("TextButton", {
        Size = UDim2.fromOffset(28, 20),
        Position = UDim2.new(1, -64, 0.5, -10),
        BackgroundTransparency = 1,
        Text = "—",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 16,
        Parent = header
    })

    local content = new("Frame", {
        Size = UDim2.new(1,0,1,-28),
        Position = UDim2.fromOffset(0,28),
        BackgroundColor3 = self.Theme.Panel,
        BorderSizePixel = 0,
        Parent = frame
    })

    local contentCorner = new("UICorner", {CornerRadius = self.Theme.Corner})
    contentCorner.Parent = content

    local tabbar = new("Frame", {
        Size = UDim2.new(1,0,0,28),
        Position = UDim2.fromOffset(0,0),
        BackgroundColor3 = self.Theme.Panel2,
        BorderSizePixel = 0,
        Parent = content
    })
    local tabbarLayout = new("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, Padding = UDim.new(0,6)})
    tabbarLayout.Parent = tabbar
    local tabbarPadding = new("UIPadding", {PaddingLeft = UDim.new(0,6)})
    tabbarPadding.Parent = tabbar

    local pagesHolder = new("Frame", {
        Size = UDim2.new(1,0,1,-28),
        Position = UDim2.fromOffset(0,28),
        BackgroundTransparency = 1,
        Parent = content
    })

    local pagesUILayout = new("UIListLayout", {Padding = UDim.new(0,8), SortOrder = Enum.SortOrder.LayoutOrder})
    pagesUILayout.Parent = pagesHolder
    local pagesPadding = new("UIPadding", {PaddingLeft = UDim.new(0,8), PaddingTop = UDim.new(0,8), PaddingRight = UDim.new(0,8)})
    pagesPadding.Parent = pagesHolder

    -- Dragging support (header draggable)
    do
        local dragging = false
        local dragStart, startPos = nil, nil
        header.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        UIS.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- minimize/close behavior
    local minimized = false
    btnMin.MouseButton1Click:Connect(function()
        minimized = not minimized
        pagesHolder.Visible = not minimized
        tabbar.Visible = not minimized
        -- optional shrink frame
        if minimized then
            frame.Size = UDim2.fromOffset(size.X, 28)
        else
            frame.Size = UDim2.fromOffset(size.X, size.Y)
        end
    end)

    btnClose.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)

    local window = {
        Gui = gui,
        Frame = frame,
        Header = header,
        Title = titleLabel,
        Content = content,
        TabBar = tabbar,
        PagesHolder = pagesHolder,
        Tabs = {},
        Size = size
    }

    -- set as default one for theme updates convenience
    self.State.DefaultWindow = window

    return window
end

-- Create Tab (returns page frame)
function UILib:CreateTab(window, tabName)
    local btn = new("TextButton", {
        Size = UDim2.fromOffset(110, 22),
        BackgroundTransparency = 1,
        Text = tabName,
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 14,
        Parent = window.TabBar
    })
    local page = new("ScrollingFrame", {
        Size = UDim2.new(1,0,1,0),
        CanvasSize = UDim2.new(0,0,0,0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        Visible = false,
        Parent = window.PagesHolder
    })
    local layout = new("UIListLayout", {Padding = UDim.new(0,8), SortOrder = Enum.SortOrder.LayoutOrder})
    layout.Parent = page
    local padding = new("UIPadding", {PaddingTop = UDim.new(0,8), PaddingLeft = UDim.new(0,8), PaddingRight = UDim.new(0,8)})
    padding.Parent = page

    table.insert(window.Tabs, {Name = tabName, Button = btn, Page = page})

    btn.MouseButton1Click:Connect(function()
        for _,t in ipairs(window.Tabs) do
            t.Page.Visible = (t == window.Tabs[#window.Tabs] and false) -- noop
        end
        -- switch properly:
        for _, t in ipairs(window.Tabs) do
            t.Page.Visible = (t.Name == tabName)
            t.Button.BackgroundColor3 = t.Page.Visible and self.Theme.Panel or Color3.fromRGB(0,0,0,0)
        end
    end)

    -- if first tab, activate
    if #window.Tabs == 1 then
        for _, t in ipairs(window.Tabs) do
            t.Page.Visible = (t.Name == tabName)
        end
    end

    return page
end

-- Basic widgets: Button, Toggle, Slider
function UILib:CreateButton(page, text, callback)
    local btn = new("TextButton", {
        Size = UDim2.new(1, 0, 0, 32),
        BackgroundColor3 = self.Theme.Panel2,
        Text = text or "Button",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 14,
        BorderSizePixel = 0,
        Parent = page
    })
    new("UICorner", {CornerRadius = self.Theme.Corner}).Parent = btn

    btn.MouseButton1Click:Connect(function()
        if type(callback) == "function" then
            task.spawn(callback)
        end
    end)
    return btn
end

function UILib:CreateToggle(page, label, default, onChanged)
    local state = default and true or false
    local container = new("Frame", {Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1, Parent = page})
    local left = new("TextLabel", {
        Size = UDim2.new(1, -70, 1, 0),
        BackgroundTransparency = 1,
        Text = label or "Toggle",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = container
    })
    local btn = new("TextButton", {
        Size = UDim2.fromOffset(60, 26),
        Position = UDim2.new(1, -64, 0.5, -13),
        BackgroundColor3 = state and self.Theme.Accent or Color3.fromRGB(90,90,90),
        Text = state and "ON" or "OFF",
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 12,
        Parent = container
    })
    new("UICorner", {CornerRadius = self.Theme.Corner}).Parent = btn

    local function set(s)
        state = s and true or false
        btn.Text = state and "ON" or "OFF"
        btn.BackgroundColor3 = state and self.Theme.Accent or Color3.fromRGB(90,90,90)
        if type(onChanged) == "function" then task.spawn(onChanged, state) end
    end

    btn.MouseButton1Click:Connect(function()
        set(not state)
    end)

    set(state)
    return {
        Get = function() return state end,
        Set = set,
        Frame = container
    }
end

function UILib:CreateSlider(page, label, min, max, default, step, onChanged)
    min = tonumber(min) or 0
    max = tonumber(max) or 100
    step = tonumber(step) or 1
    local value = tonumber(default) or min

    local frame = new("Frame", {Size = UDim2.new(1,0,0,56), BackgroundTransparency = 1, Parent = page})
    local lbl = new("TextLabel", {
        Size = UDim2.new(1,0,0,18),
        BackgroundTransparency = 1,
        Text = (label or "Slider")..": "..tostring(value),
        TextColor3 = self.Theme.Text,
        Font = self.Theme.Font,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = frame
    })
    local bar = new("Frame", {
        Size = UDim2.new(1,0,0,12),
        Position = UDim2.fromOffset(0,24),
        BackgroundColor3 = Color3.fromRGB(60,60,60),
        Parent = frame
    })
    new("UICorner", {CornerRadius = UDim.new(0,6)}).Parent = bar

    local fill = new("Frame", {Size = UDim2.new((value-min)/(max-min), 0, 1, 0), BackgroundColor3 = self.Theme.Accent, Parent = bar})
    new("UICorner", {CornerRadius = UDim.new(0,6)}).Parent = fill

    local dragging = false
    local function applyFromX(x)
        local rel = math.clamp((x - bar.AbsolutePosition.X) / math.max(1, bar.AbsoluteSize.X), 0, 1)
        local raw = min + (max - min) * rel
        local stepped = math.floor((raw/step) + 0.5) * step
        value = math.clamp(stepped, min, max)
        fill.Size = UDim2.new((value-min)/(max-min), 0, 1, 0)
        lbl.Text = (label or "Slider")..": "..tostring(value)
        if type(onChanged) == "function" then task.spawn(onChanged, value) end
    end

    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            applyFromX(input.Position.X)
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            applyFromX(input.Position.X)
        end
    end)
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- init positioning (safe call because AbsolutePosition may not be ready immediately)
    task.defer(function()
        applyFromX(bar.AbsolutePosition.X + bar.AbsoluteSize.X * ((value-min)/(max-min)))
    end)

    return {
        Get = function() return value end,
        Set = function(v) value = math.clamp(tonumber(v) or value, min, max); task.spawn(function() applyFromX(bar.AbsolutePosition.X + bar.AbsoluteSize.X * ((value-min)/(max-min))) end) end,
        Frame = frame
    }
end

-- Simple helper to create basic sample window quickly
function UILib:CreateSample()
    local win = self:CreateWindow("MyUI Sample", Vector2.new(360, 360))
    local t1 = self:CreateTab(win, "Main")
    local t2 = self:CreateTab(win, "Settings")
    self:CreateButton(t1, "Say Hello", function() print("Hello!") end)
    local togg = self:CreateToggle(t1, "God Mode", false, function(v) print("God:", v) end)
    local s = self:CreateSlider(t2, "Volume", 0, 100, 35, 5, function(v) print("Vol:", v) end)
    return win
end

return UILib
